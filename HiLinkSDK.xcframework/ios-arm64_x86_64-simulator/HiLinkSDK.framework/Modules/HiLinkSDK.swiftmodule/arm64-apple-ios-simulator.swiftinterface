// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name HiLinkSDK
import AmazonChimeSDK
import CommonCrypto
import CryptoKit
import Foundation
@_exported import HiLinkSDK
import ReplayKit
import Swift
import SwiftUI
import TXLiteAVSDK_Live
import TXLiteAVSDK_ReplayKitExt
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class BroadcastHandler {
  public init(appGroupId: Swift.String, onError: @escaping (Foundation.NSError) -> Swift.Void)
  public func broadcastStarted(withSetupInfo setupInfo: [Swift.String : ObjectiveC.NSObject]?)
  public func broadcastFinished()
  public func processSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, with sampleBufferType: ReplayKit.RPSampleBufferType)
  @objc deinit
}
public struct ScreenShareInfo {
  public init(appGroupId: Swift.String, broadcastExtension: Swift.String)
}
@_hasMissingDesignatedInitializers public class Meeting : HiLinkSDK.BaseMeeting {
  public enum Status : Swift.String, Swift.Decodable {
    case unknown
    case created
    case finished
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let id: Swift.String
  final public let url: Foundation.URL
  final public let status: HiLinkSDK.Meeting.Status
  public init(id: Swift.String, url: Foundation.URL, status: HiLinkSDK.Meeting.Status, externalId: Swift.String, title: Swift.String, startTime: Foundation.Date, endTime: Foundation.Date, timerStartTime: Foundation.Date, timerEndTime: Foundation.Date)
  @objc deinit
}
public struct MeetingView : SwiftUI.UIViewControllerRepresentable {
  public typealias UIViewControllerType = HiLinkSDK.MeetingViewController
  @_hasMissingDesignatedInitializers public class Coordinator {
    @objc deinit
  }
  public init(meeting: HiLinkSDK.Meeting, joinUrl: Foundation.URL, screenShareInfo: HiLinkSDK.ScreenShareInfo?)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: HiLinkSDK.MeetingView.Context) -> HiLinkSDK.MeetingViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: HiLinkSDK.MeetingViewController, context: HiLinkSDK.MeetingView.Context)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> HiLinkSDK.MeetingView.Coordinator
  public typealias Body = Swift.Never
}
public struct Participant : Swift.Encodable {
  public enum Role : Swift.String, Swift.Encodable {
    case host
    case attendee
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(role: HiLinkSDK.Participant.Role, externalId: Swift.String, name: Swift.String? = nil, email: Swift.String? = nil, avatarUrl: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
public class ApiClient {
  public init(accessKey: Swift.String, secretKey: Swift.String, customHost: Swift.String? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  public func createMeeting(_ newMeeting: HiLinkSDK.NewMeeting) async throws -> HiLinkSDK.Meeting
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getMeetings() async throws -> [HiLinkSDK.Meeting]
  #endif
  public func getJoinUrl(meeting: HiLinkSDK.Meeting, participant: HiLinkSDK.Participant) throws -> Foundation.URL
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MeetingViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(meeting: HiLinkSDK.Meeting, joinUrl: Foundation.URL, screenShareInfo: HiLinkSDK.ScreenShareInfo?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BaseMeeting : Swift.Decodable {
  final public let externalId: Swift.String
  final public let title: Swift.String
  final public let startTime: Foundation.Date
  final public let endTime: Foundation.Date
  final public let timerStartTime: Foundation.Date
  final public let timerEndTime: Foundation.Date
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers public class NewMeeting : HiLinkSDK.BaseMeeting, Swift.Encodable {
  required public init(from decoder: any Swift.Decoder) throws
  public init(externalId: Swift.String, title: Swift.String, startTime: Foundation.Date, endTime: Foundation.Date, timerStartTime: Foundation.Date, timerEndTime: Foundation.Date)
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension HiLinkSDK.Meeting.Status : Swift.Equatable {}
extension HiLinkSDK.Meeting.Status : Swift.Hashable {}
extension HiLinkSDK.Meeting.Status : Swift.RawRepresentable {}
extension HiLinkSDK.Participant.Role : Swift.Equatable {}
extension HiLinkSDK.Participant.Role : Swift.Hashable {}
extension HiLinkSDK.Participant.Role : Swift.RawRepresentable {}
